@using DartsScoreboardGames.Infrastructure.Services
@using DartsScoreboardGames.Services.Models

@inject GameStateProvider GameStateProvider
@inject AvatarImageProvider AvatarImageProvider
@inject PlayerHistoryService PlayerHistoryService

<div>
    <MudDialog Style="width: 50vw;" >
        <DialogContent>
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                @if (ExistingPlayers.Any()) {
                    <MudTabPanel Text="Recent">
                        @foreach (var player in ExistingPlayers) {
                            <PlayerDisplay Class="mb-5" Player=player OnCrossClick=@(() => RemovePlayer(player)) OnSelect=@(() => AddPlayer(player)) />
                        }
                    </MudTabPanel>
                }
                <MudTabPanel Text="New Player">
                      <MudExpansionPanels Elevation="0">
                        <MudExpansionPanel @bind-Expanded=@avatarPanelOpen HideIcon=true>
                            <TitleContent>
                                <MudAvatar Size="Size.Large">
                                    <MudImage Src=@NewAvatar></MudImage>
                                 </MudAvatar>
                            </TitleContent>
                            <ChildContent>
                                <div class="d-flex flex-row flex-wrap" style="max-width: 50vw;">
                                    @foreach (var item in AvatarImageProvider.Avatars) {
                                        <MudAvatar Style="cursor:pointer;" Class="mx-1 mt-3" Size="Size.Medium" @onclick="@(async () => {
                                            NewAvatar = item;
                                            avatarPanelOpen = false;
                                        })">
                                            <MudImage Src=@item ></MudImage>
                                        </MudAvatar>
                                    }
                                </div>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                    <MudTextField MaxLength=15 Immediate=true @bind-Value="NewPlayerName" Label="Name" Variant="Variant.Text" Class="my-5"></MudTextField>
                    <MudButton Disabled=@(string.IsNullOrEmpty(NewPlayerName)) OnClick="@(async () => await AddPlayer())" Variant="Variant.Filled">Add</MudButton>
                </MudTabPanel>
            </MudTabs>
        </DialogContent>
    </MudDialog>
</div>

@code{
    [CascadingParameter]
    private IMudDialogInstance? Me { get; set; }

    private List<Player> ExistingPlayers = [];

    bool avatarPanelOpen;

    public string NewPlayerName { get; set; } = default!;
    public string NewAvatar { get; set; } = default!;

    protected override async Task OnInitializedAsync() {
        NewAvatar = AvatarImageProvider.Avatars.First();
        ExistingPlayers = await PlayerHistoryService.GetHistoricPlayersAsync();
    }

    private async Task AddPlayer(Player? player = null) {
        player ??= new(NewPlayerName, NewAvatar);
        NewPlayerName = NewAvatar = default!;
        await PlayerHistoryService.AddPlayerHistoryAsync(player);
        GameStateProvider.AddPlayer(player);
        Me?.Close();
    }

    private async Task RemovePlayer(Player player) {
        await PlayerHistoryService.RemovePlayerFromHistoryAsync(player);
        ExistingPlayers = await PlayerHistoryService.GetHistoricPlayersAsync();
        StateHasChanged();
    }

}
